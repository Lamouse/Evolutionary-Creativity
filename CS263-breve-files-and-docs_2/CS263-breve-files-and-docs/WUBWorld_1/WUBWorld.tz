@use Control.
@use Shape.
@use Mobile.
@use Stationary.
@use Sound.

@define WORLD_SIZE 50.

Control : WUBWorldControl {
	+ variables:
		floor (object).
		explosionSound, shotSound, chompSound, whoopSound, shotShape (object).

	+ to play-explosion-sound:
		explosionSound play.

	+ to play-shot-sound:
		shotSound play.

	+ to play-chomp-sound:
		chompSound play.

	+ to play-whoop-sound:
		whoopSound play.

	+ to get-shot-shape:
		return shotShape.

	+ to init:
		floor = (new Stationary register with-shape (new Cube init-with size (WORLD_SIZE, .2, WORLD_SIZE)) at-location (0, 0, 0)).

		shotSound = new Sound load from-file "sounds/laser_cannon.wav".
		explosionSound = new Sound load from-file "sounds/explosion.wav".
		whoopSound = new Sound load from-file "whoopwhoop.wav".
		chompSound = new Sound load from-file "chomp.wav".

		shotShape = new Sphere init-with radius .3.

		self set-integration-step to 0.2.

		self enable-lighting.
		self move-light to (0, 10, 0).

		floor catch-shadows.

		self enable-reflections.
		self enable-shadow-volumes.
		self set-background-texture to (self load-image from "images/clouds.png").

		self point-camera at (0, 0, 0) from (5, 3, 5).

		10 new Foods.
}

Mobile : WUB (aka WUBs) {
	+ to init:
		self move to random[(WORLD_SIZE, 0, WORLD_SIZE)] - (WORLD_SIZE / 2, -.5, WORLD_SIZE / 2).
	
		self set-color to (1, 0, 0).
}

Mobile : Agent (aka Agents) {
	+ variables:
		shape (object).
		velocity (double).
		angle (double).
		heading (vector).
		turningLeft, turningRight (int).
		dieCount (int).
		dying (int).
		atEdge (int).

	+ to set-turning-left to i (int):
		turningLeft = i.

	+ to set-turning-right to i (int):
		turningRight = i.

	+ to get-heading:
		return heading.

	+ to shoot:
		new Shot fire from (self get-location) towards heading.

	+ to init:
		shape = new AgentShape.
		self set-shape to shape.

		self set-color to (0, 0, 1).

		self move to (0, .1, 0).

		self set-angle to 0.

		self handle-collisions with-type "Food" with-method "eat".
		self handle-collisions with-type "WUB" with-method "be-eaten".

	+ to eat food f (object):
		free f.
		controller play-chomp-sound.

	+ to be-eaten by w (object):
		if !dying: self kill.

	+ to accelerate:
		self set-speed to velocity + 0.1.

	+ to decelerate:
		self set-speed to velocity - 0.1.

	+ to set-speed to value (double):
		value /= 2.

		velocity = value.

		if velocity > .5: velocity = .5.
		if velocity < 0: velocity = 0.

	+ to set-angle to a (double):
		angle = a.
		self rotate around-axis (-1, 0, 0) by 1.57.
		self relative-rotate around-axis (0, -1, 0) by angle.

	+ to turn-left:
		self set-angle to angle - 0.03.

	+ to turn-right:
		self set-angle to angle + 0.03.

	+ to kill:
		controller play-whoop-sound.
		dieCount = 200.
		dying = 1.

	+ to iterate:
		myrot (matrix).
		myloc, myvel (vector).

		myloc = (self get-location).
		myvel = (self get-heading).

		if dying: {
			self turn-left.
			self turn-left.
			self turn-left.
			self turn-left.
			dieCount--.

			if dieCount == 0: {
				100 new Particles move to (self get-location).
				controller play-explosion-sound.
				free self.
			}

			return.
		}

		if turningLeft: self turn-left.
		if turningRight: self turn-right.

		if myloc::x > (WORLD_SIZE / 2) && myvel::x > 0.0: {
			self set-speed to 0.
			atEdge = 1.
		} else if myloc::z > (WORLD_SIZE / 2) && myvel::z > 0.0: {
			self set-speed to 0.
			atEdge = 1.
		} else if myloc::x < -(WORLD_SIZE / 2) && myvel::x < 0.0: {
			self set-speed to 0.
			atEdge = 1.
		} else if myloc::z < -(WORLD_SIZE / 2) && myvel::z < 0.0: {
			self set-speed to 0.
			atEdge = 1.
		} else {
			atEdge = 0.
		}

		myrot = (self get-rotation).

		heading = myrot * (0, 1, 0).

		self set-velocity to velocity * heading.

		myloc::y = 0.2.

		self move to myloc.
		
	+ to track-food:
		a (double).

		self remove-all-lines.
		self add-line to (self get-closest-food) with-color (1, 0, 0).

		a = self get-angle to (self get-closest-food).

		if a > 0.0: self turn-right.		
		else if a < 0.0: self turn-left.

	+ to get-closest-food:
		bestDistance (double).
		best, item (object).
		
		bestDistance = 200.
		
		foreach item in all Food: {
			if |(self get-location) - (item get-location)| < bestDistance: {
				 best = item.
				 bestDistance = |(self get-location) - (item get-location)|.
			}
		}
		
		return best.
		
	+ to get-object-angle to o (object):
		return (self get-angle to (o get-location)). 

	+ to get-angle to v (vector):
		a (double).
		toO (vector).

		toO = v - (self get-location).

		a = angle(heading, toO).

		if (transpose((self get-rotation)) * toO)::x < 0.0: return -a.

		return a. 

	+ to detect-edge:
		return atEdge.
}

Mobile : Food (aka Foods) {
	+ to init:
		self set-shape to (new Sphere init-with radius .5).
		self set-lightmap to 3.
		self move to random[(WORLD_SIZE, 0, WORLD_SIZE)] - (WORLD_SIZE / 2, -.5, WORLD_SIZE / 2).
		self set-color to (0, 0, 0).

	+ to iterate:
		m (double).

		m = sin((controller get-time) / 6.0).
		self set-color to (1 - m * m, 1 - m * m, 1).
		
}

Mobile : Shot (aka Shots) {
	+ variables:
		countdown (int).

	+ to init: 
		self set-shape to (controller get-shot-shape).
		self set-bitmap to 2.
		self set-color to (1, 0, 0).
		countdown = 100.

		self handle-collisions with-type "WUB" with-method "collide".

		controller play-shot-sound.

	+ to fire from source (vector) towards direction (vector):
		self move to source.
		self set-velocity to 2 * direction / | direction |.

	+ to iterate:
		countdown--.

		if countdown == 0: free self.

	+ to collide with wub (object):
		30 new Particles move to (wub get-location).
		controller play-explosion-sound.
		free wub.
}

CustomShape : AgentShape {
	+ to init:
		a, b, c, d (vector).

		a = (0, 1, 0).
		b = (.25, 0, 0).
		c = (-.25, 0, 0).
		d = (0, -.1, .5).

		self add-face with-vertex-list { a, b, c }.
		self add-face with-vertex-list { a, b, d }.
		self add-face with-vertex-list { a, c, d }.
		self add-face with-vertex-list { d, c, b }.
		self finish-shape with-density 1.0.
}

Mobile : Particle (aka Particles) {
	+ variables:
		shape (object).
		lifetime (int).

	+ to init:
		self set-lightmap to 2.
		shape = new Sphere init-with radius .05 + random[.3].
		self set-color to random[(1, 1, 1)].

		self set-velocity to random[(2, 2, 2)] - (1, 1, 1).

		lifetime = 20 + random[30].

	+ to iterate:
		lifetime--.

		if lifetime == 0: free self.
}
